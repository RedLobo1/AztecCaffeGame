using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.Serialization;

public class M_MouseLimitScript : MonoBehaviour
{

    public float radius = 100f; // Specify the radius
    [FormerlySerializedAs("moveSpeed")] public float MoveSpeed = 25f; // Specify the move speed

    [SerializeField] private Transform targetObject; // Reference to the target object
    [SerializeField] private CharacterControl2D _control;
    [SerializeField] private bool _unlimitedMouse;

    //Controls
    public InputMaster PlayerInputMaster; //controls cass generated by unity

    private InputAction _lookAround;
    private Vector2 _moveDirection;

    private void Awake()
    {
        PlayerInputMaster = new InputMaster();

    }

    private void OnEnable()
    {
        _lookAround = PlayerInputMaster.Player.LookAround;
        _lookAround.Enable();
    }

    private void OnDisable()
    {
        _lookAround.Disable();
    }

    void Update()
    {
        Vector2 mousePosition = _lookAround.ReadValue<Vector2>(); // Get mouse position in world space
        _moveDirection += mousePosition * MoveSpeed * Time.deltaTime;
        LimitMoveDirection();

        if (_control.Aiming || _unlimitedMouse) 
        {
            UnlimitedMouse();
        }
        else
        {
            LimitMouse();
            RotateMouse();
        }
    }

    private void LimitMoveDirection()
    {
        if (_moveDirection.x > transform.position.x + radius)
        {
            _moveDirection = new Vector2(transform.position.x + radius, _moveDirection.y);
        }
        if (_moveDirection.x < transform.position.x - radius)
        {
            _moveDirection = new Vector2(transform.position.x - radius, _moveDirection.y);
        }
        if (_moveDirection.y > transform.position.y + radius)
        {
            _moveDirection = new Vector2(_moveDirection.x, transform.position.y + radius);
        }
        if (_moveDirection.y < transform.position.y - radius)
        {
            _moveDirection = new Vector2(_moveDirection.x, transform.position.y - radius);
        }
    }

    private void UnlimitedMouse()
    {
        //transform.position = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        transform.position = _moveDirection;
        transform.position = new Vector3(transform.position.x, transform.position.y, 0f);
        transform.rotation = Quaternion.identity;
    }

    private void RotateMouse()
    {

        // Get the direction from the arrow to the player
        Vector2 directionToPlayer = targetObject.position - transform.position;

        // Calculate the angle in degrees
        float angle = Mathf.Atan2(directionToPlayer.y, directionToPlayer.x) * Mathf.Rad2Deg;

        // Rotate the arrow to face the player
        transform.rotation = Quaternion.AngleAxis(angle, Vector3.forward);
    }

    private void LimitMouse()
    {
        Vector2 targetObjectVector2 = new Vector2(targetObject.position.x, targetObject.position.y);

        Vector2 mousePosition = _moveDirection; // Get mouse position in world space

        Vector2 clampedMousePosition = Vector2.ClampMagnitude(mousePosition - targetObjectVector2, radius); // Limit mouse position to radius

        transform.position = targetObjectVector2 + clampedMousePosition; // Set mouse position

    }
    private void Move(Vector2 input)
    {
        // Use the input to move the player
        Vector3 moveDirection = new Vector3(input.x, input.y, 0f);
        transform.position += moveDirection * MoveSpeed * Time.deltaTime;
    }
}


